# app_ve10.py
# -*- coding: utf-8 -*-
# ------------------------------------------------------------
# VE.10 ‚Äî Load Profile Analyzer (PEA)
# Streamlit Web UI for analyzing electronic meter load profiles.
# Author: PEA Change Management Office
# ------------------------------------------------------------

import io
import json
import math
from datetime import datetime, time

import numpy as np
import pandas as pd
import plotly.express as px
import streamlit as st

# -----------------------------
# Page Config
# -----------------------------
st.set_page_config(
    page_title="VE.10 | Load Profile Analyzer (PEA)",
    layout="wide",
    initial_sidebar_state="expanded"
)

# -----------------------------
# Helpers
# -----------------------------
DEFAULT_COLMAP = {
    "datetime": "CH1",
    "status": "CH2",
    "voltage": "CH3",
    "p_import": "CH4",
    "p_export": "CH5",
}

def load_dataframe(uploaded, csv_sep=",", excel_sheet=None, excel_skiprows=None):
    if uploaded is None:
        return None

    import os
    name = uploaded.name.lower()
    ext = os.path.splitext(name)[-1]

    # Excel
    if ext in [".xls", ".xlsx"]:
        kw = {}
        if excel_sheet not in (None, "", "auto"):
            kw["sheet_name"] = excel_sheet
        if isinstance(excel_skiprows, int) and excel_skiprows > 0:
            kw["skiprows"] = excel_skiprows

        if ext == ".xls":
            # Excel ‡∏£‡∏∏‡πà‡∏ô‡πÄ‡∏Å‡πà‡∏≤ ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ xlrd
            df = pd.read_excel(uploaded, engine="xlrd", **kw)
        else:
            # Excel ‡∏£‡∏∏‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà (xlsx)
            df = pd.read_excel(uploaded, engine="openpyxl", **kw)

    # CSV
    elif ext == ".csv":
        df = pd.read_csv(uploaded, sep=csv_sep)

    else:
        raise ValueError(f"‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• {ext}")

    return df

def clean_unit_series(s):
    """Remove ' V' / ' kW' suffixes if present; coerce to numeric."""
    if s is None:
        return s
    if pd.api.types.is_numeric_dtype(s):
        return s
    s = (
        s.astype(str)
         .str.replace(" V", "", regex=False)
         .str.replace(" kW", "", regex=False)
         .str.replace(",", "", regex=False)
    )
    return pd.to_numeric(s, errors="coerce")

def parse_datetime_col(s, fmt=None):
    if fmt and fmt.strip():
        return pd.to_datetime(s, format=fmt, errors="coerce")
    return pd.to_datetime(s, errors="coerce")

def summarize_missing(df):
    miss = df.isna().sum().to_frame("Missing")
    miss["Percent"] = (miss["Missing"] / len(df)) * 100 if len(df) else 0
    return miss

def flag_anomalies(df, v_col, p_col, v_sag, v_swell, base_kw_quiet=0.05, z_thresh=3.0):
    out = pd.DataFrame(index=df.index)
    out["sag"] = df[v_col] < v_sag
    out["swell"] = df[v_col] > v_swell
    # constant low import (potential leakage at night 00:00-04:00) for > N points
    # mark each row that meets nighttime & base import
    idx_night = df.index.indexer_between_time(time(0,0), time(4,0))
    night_mask = pd.Series(False, index=df.index)
    night_mask.iloc[idx_night] = True if len(idx_night) else False
    out["night_base"] = (df[p_col] >= base_kw_quiet) & night_mask

    # Z-score outliers on kW import
    x = df[p_col].astype(float)
    if len(x.dropna()) > 5 and x.std(skipna=True) > 0:
        z = (x - x.mean(skipna=True)) / x.std(skipna=True)
        out["kw_outlier"] = z.abs() > z_thresh
    else:
        out["kw_outlier"] = False

    return out

def compute_kwh(df, p_col, interval_minutes):
    return df[p_col].fillna(0) * (interval_minutes / 60.0)

def to_excel_bytes(df_dict):
    """df_dict = {"SheetName": dataframe} -> bytes of xlsx"""
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine="openpyxl") as writer:
        for name, d in df_dict.items():
            d.to_excel(writer, sheet_name=str(name)[:31], index=True)
    return output.getvalue()

# -----------------------------
# Sidebar ‚Äî Controls
# -----------------------------
st.sidebar.title("VE.10 ‚Äî Settings")

with st.sidebar.expander("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ (Input)", expanded=True):
    uploaded = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel/CSV", type=["xls","xlsx","csv"])
    filetype_hint = st.caption("‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö .xls, .xlsx, .csv")
    csv_sep = st.text_input("CSV Separator", value=",")
    excel_sheet = st.text_input("Excel Sheet name (‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á=auto)", value="")
    excel_skiprows = st.number_input("Excel skiprows (‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á)", min_value=0, value=7, step=1)

with st.sidebar.expander("‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡∏•‡∏≤", expanded=True):
    st.caption("‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á load meter")
    col_datetime = st.text_input("‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏ß‡∏•‡∏≤", value=DEFAULT_COLMAP["datetime"])
    col_status = st.text_input("‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", value=DEFAULT_COLMAP["status"])
    col_voltage = st.text_input("‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô (V)", value=DEFAULT_COLMAP["voltage"])
    col_pimp = st.text_input("‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ (kW)", value=DEFAULT_COLMAP["p_import"])
    col_pexp = st.text_input("‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡πà‡∏≤‡∏¢‡∏¢‡πâ‡∏≠‡∏ô (kW)", value=DEFAULT_COLMAP["p_export"])
    date_fmt = st.text_input("‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡∏•‡∏≤ (‡πÄ‡∏ä‡πà‡∏ô %d-%m-%Y %H:%M:%S)", value="%d-%m-%Y %H:%M:%S")

with st.sidebar.expander("‡πÄ‡∏Å‡∏ì‡∏ë‡πå/‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå", expanded=True):
    interval_min = st.number_input("‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ 1 ‡∏à‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏ô‡∏≤‡∏ó‡∏µ)", min_value=1, value=15, step=1)
    v_sag = st.number_input("‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÑ‡∏ü‡∏ï‡∏Å (V ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤)", min_value=0, value=210, step=1)
    v_swell = st.number_input("‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÑ‡∏ü‡πÄ‡∏Å‡∏¥‡∏ô (V ‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤)", min_value=240, step=1)
    base_kw_quiet = st.number_input("‡πÄ‡∏Å‡∏ì‡∏ë‡πå base load ‡∏ï‡∏≠‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô (kW)", min_value=0.0, value=0.05, step=0.01, format="%.2f")
    z_thresh = st.number_input("Z-score threshold (kW outlier)", min_value=1.0, value=3.0, step=0.5)
    resample_rule = st.selectbox("‡∏™‡∏£‡∏∏‡∏õ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ (Resample)", ["15T","30T","H","D","M"], index=2,
        help="15T=15 ‡∏ô‡∏≤‡∏ó‡∏µ, H=‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á, D=‡∏ß‡∏±‡∏ô, M=‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")

with st.sidebar.expander("‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á", expanded=True):
    filter_positive_power = st.checkbox("‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà Import > 0", value=False)

# -----------------------------
# Header
# -----------------------------
st.title("‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Load Profile ‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏≠‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏£‡∏≠‡∏ô‡∏¥‡∏Å‡∏™‡πå (VE.10)")
st.markdown(
    """
**‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢:** ‡∏¢‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ç‡∏µ‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏µ‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏ô‡πà‡∏ß‡∏¢/‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå, ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥/‡∏ï‡∏≠‡∏ö‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô, ‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠  
**‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô:** ‡∏Å‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á (‡∏ú‡∏π‡πâ‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô: ‡∏Å‡∏°‡∏ï)
"""
)

# -----------------------------
# Load & Prepare
# -----------------------------
tab_overview, tab_quality, tab_timeseries, tab_anomaly, tab_aggregate, tab_export, tab_about = st.tabs(
    ["üì• ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°/‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤", "üîé ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "üìà ‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏ß‡∏•‡∏≤", "üö® ‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥", "üßÆ ‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤", "üì§ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å", "‚ÑπÔ∏è ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö"]
)

with tab_overview:
    st.subheader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤")
    if uploaded is None:
        st.info("‡πÇ‡∏õ‡∏£‡∏î‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    else:
        try:
            df_raw = load_dataframe(uploaded, csv_sep=csv_sep, excel_sheet=excel_sheet, excel_skiprows=excel_skiprows)
        except Exception as e:
            st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: {e}")
            st.stop()

        st.success(f"‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {df_raw.shape[0]:,} ‡πÅ‡∏ñ‡∏ß, {df_raw.shape[1]} ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå")
        with st.expander("‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö"):
            st.dataframe(df_raw.head(20), use_container_width=True)

        # --- Select only needed columns (if present) ---
        required_cols = [col_datetime, col_status, col_voltage, col_pimp, col_pexp]
        missing = [c for c in required_cols if c not in df_raw.columns]
        if missing:
            st.error(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ: {missing}\n‡πÇ‡∏õ‡∏£‡∏î‡∏õ‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏£‡∏¥‡∏á")
            st.stop()

        df = df_raw[required_cols].copy()

        # Parse datetime
        df[col_datetime] = parse_datetime_col(df[col_datetime], fmt=date_fmt)

        # Clean units -> numeric
        for c in [col_voltage, col_pimp, col_pexp]:
            df[c] = clean_unit_series(df[c])

        # Drop NA datetime & sort
        df = df.dropna(subset=[col_datetime]).sort_values(col_datetime)
        df = df.set_index(col_datetime)

        if filter_positive_power:
            df = df[df[col_pimp] > 0]

        # Store in session for other tabs
        st.session_state["df"] = df
        st.session_state["col_names"] = {
            "status": col_status, "voltage": col_voltage, "p_import": col_pimp, "p_export": col_pexp
        }
        st.session_state["params"] = {
            "interval_min": interval_min, "v_sag": v_sag, "v_swell": v_swell,
            "base_kw_quiet": base_kw_quiet, "z_thresh": z_thresh, "resample_rule": resample_rule
        }

        # Range filter UI
        st.markdown("### ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        min_dt, max_dt = df.index.min(), df.index.max()
        if pd.isna(min_dt) or pd.isna(max_dt):
            st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•‡∏á ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà/‡πÄ‡∏ß‡∏•‡∏≤")
            st.stop()

        start, end = st.slider(
            "‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤",
            min_value=min_dt.to_pydatetime(),
            max_value=max_dt.to_pydatetime(),
            value=(min_dt.to_pydatetime(), max_dt.to_pydatetime()),
            step=None,
            format="YYYY-MM-DD HH:mm"
        )
        df = df.loc[start:end]
        st.session_state["df"] = df  # update filtered

        st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤", len(df))

        with st.expander("‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á Clean/Grooming"):
            st.dataframe(df.head(30), use_container_width=True)

with tab_quality:
    st.subheader("‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Missing / Types)")
    df = st.session_state.get("df")
    if df is None:
        st.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö‡πÅ‡∏£‡∏Å")
    else:
        miss = summarize_missing(df)
        st.dataframe(miss, use_container_width=True)
        st.caption(f"‡∏£‡∏ß‡∏°‡πÅ‡∏ñ‡∏ß: {len(df):,}")

        # Quick describe
        st.markdown("#### ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô")
        st.dataframe(df.describe(include="all").T, use_container_width=True)

        # Status "power" occurrences (e.g., power outage)
        col_status = st.session_state["col_names"]["status"]
        if col_status in df.columns:
            with st.expander("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ 'power' ‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"):
                power_events = df[df[col_status].astype(str).str.contains("power", case=False, na=False)]
                st.write(f"‡∏û‡∏ö {len(power_events):,} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ 'power'")
                st.dataframe(power_events.head(100), use_container_width=True)

with tab_timeseries:
    st.subheader("‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏ß‡∏•‡∏≤ (Voltage / Power)")
    df = st.session_state.get("df")
    if df is None:
        st.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö‡πÅ‡∏£‡∏Å")
    else:
        c1, c2 = st.columns(2)
        v_col = st.session_state["col_names"]["voltage"]
        p_col = st.session_state["col_names"]["p_import"]
        with c1:
            st.plotly_chart(px.line(df.reset_index(), x=df.index, y=v_col, title="‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô‡πÑ‡∏ü‡∏ü‡πâ‡∏≤ (V)"), use_container_width=True)
        with c2:
            st.plotly_chart(px.line(df.reset_index(), x=df.index, y=p_col, title="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ (kW)"), use_container_width=True)

        with st.expander("‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤ (Distribution)"):
            c3, c4 = st.columns(2)
            with c3:
                st.plotly_chart(px.histogram(df, x=v_col, nbins=40, title="Voltage Histogram"), use_container_width=True)
            with c4:
                st.plotly_chart(px.box(df, y=p_col, points="suspectedoutliers", title="kW Boxplot"), use_container_width=True)

with tab_anomaly:
    st.subheader("‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ (Rules + Z-score)")
    df = st.session_state.get("df")
    if df is None:
        st.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö‡πÅ‡∏£‡∏Å")
    else:
        names = st.session_state["col_names"]
        params = st.session_state["params"]
        v_col, p_col = names["voltage"], names["p_import"]

        flags = flag_anomalies(df, v_col, p_col, params["v_sag"], params["v_swell"],
                               base_kw_quiet=params["base_kw_quiet"], z_thresh=params["z_thresh"])
        st.session_state["flags"] = flags

        counts = flags.sum().to_frame("count")
        st.dataframe(counts.T, use_container_width=True)

        with st.expander("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏ñ‡∏ß‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 500 ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å)"):
            show_cols = [v_col, p_col] + list(flags.columns)
            detail = df.join(flags)[show_cols]
            st.dataframe(detail[detail.any(axis=1)].head(500), use_container_width=True)

        # Overlay markers on power chart
        mark_df = df.join(flags)
        mark_df = mark_df.reset_index().rename(columns={mark_df.index.name: "ts"})
        fig = px.line(mark_df, x="ts", y=p_col, title="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ (kW) + markers")
        if "sag" in mark_df:
            fig.add_scatter(x=mark_df.loc[mark_df["sag"], "ts"],
                            y=mark_df.loc[mark_df["sag"], p_col],
                            mode="markers", name="sag")
        if "swell" in mark_df:
            fig.add_scatter(x=mark_df.loc[mark_df["swell"], "ts"],
                            y=mark_df.loc[mark_df["swell"], p_col],
                            mode="markers", name="swell")
        if "kw_outlier" in mark_df:
            fig.add_scatter(x=mark_df.loc[mark_df["kw_outlier"], "ts"],
                            y=mark_df.loc[mark_df["kw_outlier"], p_col],
                            mode="markers", name="kW outlier")
        if "night_base" in mark_df:
            fig.add_scatter(x=mark_df.loc[mark_df["night_base"], "ts"],
                            y=mark_df.loc[mark_df["night_base"], p_col],
                            mode="markers", name="night base load")
        st.plotly_chart(fig, use_container_width=True)

with tab_aggregate:
    st.subheader("‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ (Resample)")
    df = st.session_state.get("df")
    if df is None:
        st.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö‡πÅ‡∏£‡∏Å")
    else:
        names = st.session_state["col_names"]
        params = st.session_state["params"]
        v_col, p_col = names["voltage"], names["p_import"]
        rule = params["resample_rule"]

        # compute kWh
        kWh = compute_kwh(df, p_col, params["interval_min"])
        df_tmp = df.copy()
        df_tmp["kWh"] = kWh

        agg_df = df_tmp.resample(rule).agg(
            kWh=("kWh", "sum"),
            avg_voltage=(v_col, "mean"),
            max_voltage=(v_col, "max"),
            min_voltage=(v_col, "min"),
            avg_kw=(p_col, "mean"),
            max_kw=(p_col, "max")
        )
        st.dataframe(agg_df, use_container_width=True)

        c1, c2 = st.columns(2)
        with c1:
            st.plotly_chart(px.line(agg_df.reset_index(), x=agg_df.index, y="kWh", title=f"kWh ({rule})"), use_container_width=True)
        with c2:
            st.plotly_chart(px.line(agg_df.reset_index(), x=agg_df.index, y="avg_kw", title=f"‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ kW ({rule})"), use_container_width=True)

        st.session_state["agg_df"] = agg_df
        st.session_state["df_kwh"] = df_tmp[["kWh"]]

with tab_export:
    st.subheader("‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå")
    df = st.session_state.get("df")
    agg_df = st.session_state.get("agg_df")
    flags = st.session_state.get("flags")
    df_kwh = st.session_state.get("df_kwh")

    if df is None:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å")
    else:
        # CSV
        csv_clean = df.to_csv(index=True).encode("utf-8")
        st.download_button("‚¨áÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á Clean (CSV)", data=csv_clean, file_name="clean_timeseries.csv", mime="text/csv")

        if agg_df is not None:
            csv_agg = agg_df.to_csv(index=True).encode("utf-8")
            st.download_button("‚¨áÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ (CSV)", data=csv_agg, file_name="resampled_summary.csv", mime="text/csv")

        # Excel (multi-sheet)
        xls_bytes = to_excel_bytes({
            "Cleaned": df,
            "Resample": agg_df if agg_df is not None else pd.DataFrame(),
            "Flags": df.join(flags) if flags is not None else pd.DataFrame(),
            "kWh_series": df_kwh if df_kwh is not None else pd.DataFrame()
        })
        st.download_button("‚¨áÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏£‡∏∏‡∏õ (Excel)", data=xls_bytes, file_name="ve10_summary.xlsx", mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")

with tab_about:
    st.subheader("‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠")
    st.markdown(
        """
- **‡∏£‡∏´‡∏±‡∏™/‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô:** VE.10 ‚Äî Load Profile Analyzer (Streamlit UI)  
- **‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô:** ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î/‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î/‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏Å‡∏ì‡∏ë‡πå/‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥/‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤/‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏•  
- **‡∏ï‡πà‡∏≠‡∏¢‡∏≠‡∏î:** 
  - ‡πÄ‡∏û‡∏¥‡πà‡∏° rule ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ (‡πÑ‡∏ü‡∏¢‡πâ‡∏≠‡∏ô‡∏à‡∏≤‡∏Å PV, ‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ç‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏á, cross-connection) ‡πÇ‡∏î‡∏¢‡∏≠‡∏¥‡∏á‡∏Å‡∏é‡∏Ç‡∏≠‡∏á ‡∏Å‡∏ü‡∏†.
  - ‡∏ú‡∏π‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•/‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
  - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤ preset ‡∏ï‡πà‡∏≠ CA/FO/‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô
  - Export ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô PDF ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏£‡∏≤‡∏ü (‡πÄ‡∏ä‡πà‡∏ô ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô/‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)
"""
    )
    st.caption("¬© PEA ‚Äì Change Management Office")
